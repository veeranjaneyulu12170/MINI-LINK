import { useState, useEffect } from "react";
import { links, testBackendConnection } from "../services/api";
import ColorPickerWithProgress from "./ColorPickerWithProgress";
import { Link, User } from "../types"; // Import Link and User types

interface LinkFormProps {
  addLink: (linkData: {
    title: string;
    url: string;
    backgroundColor?: string;
    textColor?: string;
  }) => Promise<any>;
  deleteLink: (id: string) => void;
  user: User; // Add user prop
}

interface LinkData {
  title: string;
  url: string;
  backgroundColor?: string;
  textColor?: string;
  userId: string;
}

const LinkForm: React.FC<LinkFormProps> = ({ addLink, deleteLink, user }) => {
  const [title, setTitle] = useState("");
  const [url, setUrl] = useState("");
  const [backgroundColor, setBackgroundColor] = useState("#ffffff");
  const [textColor, setTextColor] = useState("#000000");
  const [error, setError] = useState("");
  const [loading, setLoading] = useState(false);
  const [addedLinks, setAddedLinks] = useState<Link[]>([]);
  const [success, setSuccess] = useState("");
  const [networkStatus, setNetworkStatus] = useState<'checking' | 'online' | 'offline'>('checking');

  // Check network connectivity
  useEffect(() => {
    const checkConnection = async () => {
      try {
        await testBackendConnection();
        setNetworkStatus('online');
      } catch (error) {
        console.error('Network connectivity check failed:', error);
        setNetworkStatus('offline');
      }
    };
    
    checkConnection();
    
    // Set up periodic checks
    const interval = setInterval(checkConnection, 30000); // Check every 30 seconds
    
    return () => clearInterval(interval);
  }, []);

  const validateURL = (url: string) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError("");
    setLoading(true);

    try {
      // Validate required fields
      if (!title || !url) {
        setError("Title and URL are required");
        setLoading(false);
        return;
      }

      // Check if user is authenticated
      const token = localStorage.getItem('token');
      if (!token) {
        setError("You must be logged in to create links");
        setLoading(false);
        return;
      }

      // Debug log for user object
      console.log('User object in LinkForm:', user);
      
      // Check for user object and ID
      if (!user || !user.id) {
        console.error("User object or user ID is missing:", user);
        setError("User information not found. Please refresh the page or log in again.");
        setLoading(false);
        return;
      }

      // Format URL if needed
      let formattedUrl = url;
      if (!formattedUrl.match(/^https?:\/\//i)) {
        formattedUrl = `https://${formattedUrl}`;
      }

      // Validate URL format
      try {
        new URL(formattedUrl);
      } catch (err) {
        setError("Invalid URL format");
        setLoading(false);
        return;
      }

      // Create link data object with user.id
      const linkData = {
        title: title.trim(),
        url: formattedUrl,
        originalUrl: formattedUrl, // Add originalUrl explicitly
        backgroundColor,
        textColor
      };

      console.log("Creating link with data:", linkData);
      
      // Call the addLink function (which will add userId in MainApp)
      const newLink = await addLink(linkData);
      console.log("Link created successfully:", newLink);
      
      // Add to local state
      setAddedLinks([newLink, ...addedLinks]);
      
      // Reset form
      setTitle("");
      setUrl("");
      setBackgroundColor("#ffffff");
      setTextColor("#000000");
      setSuccess("Link created successfully!");
      
      // Clear success message after 3 seconds
      setTimeout(() => {
        setSuccess("");
      }, 3000);
    } catch (err: any) {
      console.error('Error creating link:', err);
      
      // Handle network errors specifically
      if (err.code === 'ERR_NETWORK') {
        setError("Network error: Cannot connect to the server. Please check your internet connection and try again.");
      } else if (err.response?.status === 401) {
        setError("Authentication error: Please log in again.");
      } else if (err.response?.status === 400) {
        setError(err.response?.data?.error || "Invalid link data. Please check your input.");
      } else if (err.message && err.message.includes('validation failed')) {
        setError("Link validation failed. Please check your input and try again.");
      } else {
        setError(err.response?.data?.error || err.message || "Failed to create link");
      }
      
      // Log detailed error information
      if (err.response?.data) {
        console.error('Server error response:', err.response.data);
      }
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = async (id: string) => {
    try {
      await deleteLink(id);
      setAddedLinks(addedLinks.filter(link => link._id !== id));
    } catch (err) {
      setError("Error deleting link. Please try again.");
    }
  };

  return (
    <div className="space-y-6 w-full max-w-3xl mx-auto px-4 sm:px-6">
      {networkStatus === 'offline' && (
        <div className="bg-red-100 p-4 rounded-lg shadow-md mb-4">
          <p className="text-red-700 text-sm flex items-center">
            <svg className="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            Network connection issue detected. Some features may not work properly.
          </p>
        </div>
      )}
      
      <div className="h-screen w-full p-4 sm:p-6 rounded-lg shadow-[0px_14px_35px_0px_rgba(255,255,255,0.5)]">
        <h2 className="text-lg font-semibold mb-4">Add New Link</h2>
        <form onSubmit={handleSubmit} className="space-y-4">
          {/* Title Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Title
            </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter link title"
              className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
              disabled={loading}
            />
          </div>

          {/* URL Input */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              URL
            </label>
            <input
              type="text"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              placeholder="example.com"
              className="w-full px-4 py-2 border border-gray-300 rounded-xl focus:outline-none focus:ring-2 focus:ring-indigo-500"
              disabled={loading}
            />
          </div>

          {/* Color Pickers */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
            <ColorPickerWithProgress
              label="Background Color"
              color={backgroundColor}
              setColor={setBackgroundColor}
            />
            <ColorPickerWithProgress
              label="Text Color"
              color={textColor}
              setColor={setTextColor}
            />
          </div>

          {/* Error Message */}
          {error && <p className="text-red-500 text-sm">{error}</p>}
          
          {/* Success Message */}
          {success && <p className="text-green-500 text-sm">{success}</p>}

          {/* Submit Button */}
          <button
            type="submit"
            className={`w-full ${loading ? 'bg-indigo-400' : 'bg-indigo-600 hover:bg-indigo-700'} text-white px-6 py-2 rounded-xl transition-colors`}
          >
            {loading ? 'Creating...' : 'Create Link'}
          </button>
        </form>
      </div>
    </div>
  );
};

export default LinkForm;
